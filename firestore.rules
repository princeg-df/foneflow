
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.role == 'admin';
    }

    // Users collection
    match /users/{userId} {
      // Admins can create any user
      allow create: if request.auth != null && isAdmin(request.auth.uid);
      
      // Any authenticated user can read their own profile. Admins can read any profile.
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin(request.auth.uid));
      
      // Users can only update their own profile. Admins can update any.
      allow update: if request.auth != null && (request.auth.uid == userId || isAdmin(request.auth.uid));
      
      // Admins can delete any user (except the last admin, which is handled in app logic)
      allow delete: if request.auth != null && isAdmin(request.auth.uid);
    }
    
    // Orders, Cards, and Transactions
    match /{collection}/{docId} where collection in ['orders', 'cards', 'transactions'] {
      // Any authenticated user can create their own documents in these collections
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      
      // A user can read a document if they are the owner. Admins can read any document.
      allow read: if request.auth != null && (get(/databases/$(database)/documents/$(collection)/$(docId)).data.userId == request.auth.uid || isAdmin(request.auth.uid));

      // A user can update/delete a document if they are the owner. Admins can update/delete any document.
      allow update, delete: if request.auth != null && (resource.data.userId == request.auth.uid || isAdmin(request.auth.uid));
    }
  }
}
