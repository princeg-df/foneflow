
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users can be read by admins or by the user themselves.
    // Users can be created by anyone (for signup).
    // Users can only be updated or deleted by themselves or by an admin.
    match /users/{userId} {
      allow read: if isAdmin() || isOwner(userId);
      allow create: if request.auth.uid != null;
      allow update, delete: if isAdmin() || isOwner(userId);
    }

    // Orders, Cards, and Transactions can be read by admins or the owner.
    // They can be created, updated, and deleted by the owner.
    match /orders/{orderId} {
      allow read, write: if isAdmin() || isOwner(request.resource.data.userId);
      allow create: if isOwner(request.resource.data.userId);
      allow update, delete: if isAdmin() || isOwner(resource.data.userId);
    }

    match /cards/{cardId} {
      allow read, write: if isAdmin() || isOwner(request.resource.data.userId);
      allow create: if isOwner(request.resource.data.userId);
      allow update, delete: if isAdmin() || isOwner(resource.data.userId);
    }

    match /transactions/{transactionId} {
      allow read, write: if isAdmin() || isOwner(request.resource.data.userId);
      allow create: if isOwner(request.resource.data.userId);
      allow update, delete: if isAdmin() || isOwner(resource.data.userId);
    }
  }
}
